// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    output   = "../src/generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String
    emailVerified Boolean
    image         String?
    createdAt     DateTime
    updatedAt     DateTime
    sessions      Session[]
    accounts      Account[]

    posts    Post[]
    comments Comment[]

    @@unique([email])
    @@map("users")
}

model Session {
    id        String   @id @default(cuid())
    expiresAt DateTime
    token     String
    createdAt DateTime
    updatedAt DateTime
    ipAddress String?
    userAgent String?
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([token])
    @@map("sessions")
}

model Account {
    id                    String    @id @default(cuid())
    accountId             String
    providerId            String
    userId                String
    user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    accessToken           String?
    refreshToken          String?
    idToken               String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    password              String?
    createdAt             DateTime
    updatedAt             DateTime

    @@map("accounts")
}

model Verification {
    id         String    @id @default(cuid())
    identifier String
    value      String
    expiresAt  DateTime
    createdAt  DateTime?
    updatedAt  DateTime?

    @@map("verification")
}

model Post {
    id        String   @id @default(cuid())
    createdAt DateTime
    updatedAt DateTime @updatedAt

    title      String
    image      String
    content    String?
    visibility Boolean   @default(false)
    comments   Comment[]
    likes      Int       @default(0)

    authorId String
    author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

    @@map("posts")
}

model Comment {
    id        String   @id @default(cuid())
    createdAt DateTime
    updatedAt DateTime @updatedAt

    content String
    likes   Int    @default(0)

    postId String
    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

    authorId String
    author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

    @@map("comments")
}
